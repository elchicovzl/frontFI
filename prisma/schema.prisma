// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Enum_TypeListing {
  Apartamento
  Apartaestudio
  Casa
  Finca
  Habitacion
  Lote
  Bodega
  Local
  Oficina
  Edificio
  Parqueadero
}

enum Enum_UserState {
  Pending
  Active
  Inactive
}

enum Enum_StateListing {
  Active
  Pending
  Expired
  Sold
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  description String @default("")
  address String @default("")
  code String @default("")
  imageSrc String @default("")
  createdAt DateTime @default(now())
  category String?
  roomCount Int?
  bathroomCount Int?
  guestCount Int?
  parking Int?
  stratum Int?
  area Int?
  antique String?
  locationValue Float[]
  imageMultipleSrc String[]
  floor Int?
  userId String @db.ObjectId
  price Int
  administration Int?
  state Enum_StateListing @default(Pending)
  typeListing Enum_TypeListing @default(Casa)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}